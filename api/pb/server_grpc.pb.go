// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: server.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	model "notionboy/api/pb/model"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceClient is the client API for Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceClient interface {
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error)
	// GenrateToken generates a token for the user. using api key in the header.
	GenrateToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GenrateTokenResponse, error)
	// GenerateApiKey generate a new api key for the user
	GenerateApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GenerateApiKeyResponse, error)
	// DeleteApiKey delete the api key for the user
	DeleteApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateConversation(ctx context.Context, in *model.CreateConversationRequest, opts ...grpc.CallOption) (*model.Conversation, error)
	GetConversation(ctx context.Context, in *model.GetConversationRequest, opts ...grpc.CallOption) (*model.Conversation, error)
	ListConversations(ctx context.Context, in *model.ListConversationsRequest, opts ...grpc.CallOption) (*model.ListConversationsResponse, error)
	DeleteConversation(ctx context.Context, in *model.DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateMessage(ctx context.Context, in *model.CreateMessageRequest, opts ...grpc.CallOption) (*model.Message, error)
	GetMessage(ctx context.Context, in *model.GetMessageRequest, opts ...grpc.CallOption) (*model.Message, error)
	ListMessages(ctx context.Context, in *model.ListMessagesRequest, opts ...grpc.CallOption) (*model.ListMessagesResponse, error)
	DeleteMessage(ctx context.Context, in *model.DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type serviceClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceClient(cc grpc.ClientConnInterface) ServiceClient {
	return &serviceClient{cc}
}

func (c *serviceClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*CheckStatusResponse, error) {
	out := new(CheckStatusResponse)
	err := c.cc.Invoke(ctx, "/servicev1.Service/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GenrateToken(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GenrateTokenResponse, error) {
	out := new(model.GenrateTokenResponse)
	err := c.cc.Invoke(ctx, "/servicev1.Service/GenrateToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GenerateApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*model.GenerateApiKeyResponse, error) {
	out := new(model.GenerateApiKeyResponse)
	err := c.cc.Invoke(ctx, "/servicev1.Service/GenerateApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteApiKey(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/servicev1.Service/DeleteApiKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateConversation(ctx context.Context, in *model.CreateConversationRequest, opts ...grpc.CallOption) (*model.Conversation, error) {
	out := new(model.Conversation)
	err := c.cc.Invoke(ctx, "/servicev1.Service/CreateConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetConversation(ctx context.Context, in *model.GetConversationRequest, opts ...grpc.CallOption) (*model.Conversation, error) {
	out := new(model.Conversation)
	err := c.cc.Invoke(ctx, "/servicev1.Service/GetConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListConversations(ctx context.Context, in *model.ListConversationsRequest, opts ...grpc.CallOption) (*model.ListConversationsResponse, error) {
	out := new(model.ListConversationsResponse)
	err := c.cc.Invoke(ctx, "/servicev1.Service/ListConversations", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteConversation(ctx context.Context, in *model.DeleteConversationRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/servicev1.Service/DeleteConversation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) CreateMessage(ctx context.Context, in *model.CreateMessageRequest, opts ...grpc.CallOption) (*model.Message, error) {
	out := new(model.Message)
	err := c.cc.Invoke(ctx, "/servicev1.Service/CreateMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) GetMessage(ctx context.Context, in *model.GetMessageRequest, opts ...grpc.CallOption) (*model.Message, error) {
	out := new(model.Message)
	err := c.cc.Invoke(ctx, "/servicev1.Service/GetMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) ListMessages(ctx context.Context, in *model.ListMessagesRequest, opts ...grpc.CallOption) (*model.ListMessagesResponse, error) {
	out := new(model.ListMessagesResponse)
	err := c.cc.Invoke(ctx, "/servicev1.Service/ListMessages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceClient) DeleteMessage(ctx context.Context, in *model.DeleteMessageRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/servicev1.Service/DeleteMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceServer is the server API for Service service.
// All implementations must embed UnimplementedServiceServer
// for forward compatibility
type ServiceServer interface {
	Status(context.Context, *emptypb.Empty) (*CheckStatusResponse, error)
	// GenrateToken generates a token for the user. using api key in the header.
	GenrateToken(context.Context, *emptypb.Empty) (*model.GenrateTokenResponse, error)
	// GenerateApiKey generate a new api key for the user
	GenerateApiKey(context.Context, *emptypb.Empty) (*model.GenerateApiKeyResponse, error)
	// DeleteApiKey delete the api key for the user
	DeleteApiKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	CreateConversation(context.Context, *model.CreateConversationRequest) (*model.Conversation, error)
	GetConversation(context.Context, *model.GetConversationRequest) (*model.Conversation, error)
	ListConversations(context.Context, *model.ListConversationsRequest) (*model.ListConversationsResponse, error)
	DeleteConversation(context.Context, *model.DeleteConversationRequest) (*emptypb.Empty, error)
	CreateMessage(context.Context, *model.CreateMessageRequest) (*model.Message, error)
	GetMessage(context.Context, *model.GetMessageRequest) (*model.Message, error)
	ListMessages(context.Context, *model.ListMessagesRequest) (*model.ListMessagesResponse, error)
	DeleteMessage(context.Context, *model.DeleteMessageRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedServiceServer()
}

// UnimplementedServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServiceServer struct {
}

func (UnimplementedServiceServer) Status(context.Context, *emptypb.Empty) (*CheckStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedServiceServer) GenrateToken(context.Context, *emptypb.Empty) (*model.GenrateTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenrateToken not implemented")
}
func (UnimplementedServiceServer) GenerateApiKey(context.Context, *emptypb.Empty) (*model.GenerateApiKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateApiKey not implemented")
}
func (UnimplementedServiceServer) DeleteApiKey(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteApiKey not implemented")
}
func (UnimplementedServiceServer) CreateConversation(context.Context, *model.CreateConversationRequest) (*model.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateConversation not implemented")
}
func (UnimplementedServiceServer) GetConversation(context.Context, *model.GetConversationRequest) (*model.Conversation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConversation not implemented")
}
func (UnimplementedServiceServer) ListConversations(context.Context, *model.ListConversationsRequest) (*model.ListConversationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConversations not implemented")
}
func (UnimplementedServiceServer) DeleteConversation(context.Context, *model.DeleteConversationRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteConversation not implemented")
}
func (UnimplementedServiceServer) CreateMessage(context.Context, *model.CreateMessageRequest) (*model.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMessage not implemented")
}
func (UnimplementedServiceServer) GetMessage(context.Context, *model.GetMessageRequest) (*model.Message, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMessage not implemented")
}
func (UnimplementedServiceServer) ListMessages(context.Context, *model.ListMessagesRequest) (*model.ListMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMessages not implemented")
}
func (UnimplementedServiceServer) DeleteMessage(context.Context, *model.DeleteMessageRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMessage not implemented")
}
func (UnimplementedServiceServer) mustEmbedUnimplementedServiceServer() {}

// UnsafeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceServer will
// result in compilation errors.
type UnsafeServiceServer interface {
	mustEmbedUnimplementedServiceServer()
}

func RegisterServiceServer(s grpc.ServiceRegistrar, srv ServiceServer) {
	s.RegisterService(&Service_ServiceDesc, srv)
}

func _Service_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GenrateToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GenrateToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/GenrateToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GenrateToken(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GenerateApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GenerateApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/GenerateApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GenerateApiKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteApiKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteApiKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/DeleteApiKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteApiKey(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/CreateConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateConversation(ctx, req.(*model.CreateConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/GetConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetConversation(ctx, req.(*model.GetConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListConversations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListConversationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListConversations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/ListConversations",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListConversations(ctx, req.(*model.ListConversationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteConversation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteConversationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteConversation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/DeleteConversation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteConversation(ctx, req.(*model.DeleteConversationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_CreateMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.CreateMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).CreateMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/CreateMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).CreateMessage(ctx, req.(*model.CreateMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_GetMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.GetMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).GetMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/GetMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).GetMessage(ctx, req.(*model.GetMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_ListMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.ListMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).ListMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/ListMessages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).ListMessages(ctx, req.(*model.ListMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Service_DeleteMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(model.DeleteMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceServer).DeleteMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/servicev1.Service/DeleteMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceServer).DeleteMessage(ctx, req.(*model.DeleteMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Service_ServiceDesc is the grpc.ServiceDesc for Service service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Service_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "servicev1.Service",
	HandlerType: (*ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Service_Status_Handler,
		},
		{
			MethodName: "GenrateToken",
			Handler:    _Service_GenrateToken_Handler,
		},
		{
			MethodName: "GenerateApiKey",
			Handler:    _Service_GenerateApiKey_Handler,
		},
		{
			MethodName: "DeleteApiKey",
			Handler:    _Service_DeleteApiKey_Handler,
		},
		{
			MethodName: "CreateConversation",
			Handler:    _Service_CreateConversation_Handler,
		},
		{
			MethodName: "GetConversation",
			Handler:    _Service_GetConversation_Handler,
		},
		{
			MethodName: "ListConversations",
			Handler:    _Service_ListConversations_Handler,
		},
		{
			MethodName: "DeleteConversation",
			Handler:    _Service_DeleteConversation_Handler,
		},
		{
			MethodName: "CreateMessage",
			Handler:    _Service_CreateMessage_Handler,
		},
		{
			MethodName: "GetMessage",
			Handler:    _Service_GetMessage_Handler,
		},
		{
			MethodName: "ListMessages",
			Handler:    _Service_ListMessages_Handler,
		},
		{
			MethodName: "DeleteMessage",
			Handler:    _Service_DeleteMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
