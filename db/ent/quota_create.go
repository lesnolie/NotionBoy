// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/quota"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// QuotaCreate is the builder for creating a Quota entity.
type QuotaCreate struct {
	config
	mutation *QuotaMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (qc *QuotaCreate) SetCreatedAt(t time.Time) *QuotaCreate {
	qc.mutation.SetCreatedAt(t)
	return qc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableCreatedAt(t *time.Time) *QuotaCreate {
	if t != nil {
		qc.SetCreatedAt(*t)
	}
	return qc
}

// SetUpdatedAt sets the "updated_at" field.
func (qc *QuotaCreate) SetUpdatedAt(t time.Time) *QuotaCreate {
	qc.mutation.SetUpdatedAt(t)
	return qc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableUpdatedAt(t *time.Time) *QuotaCreate {
	if t != nil {
		qc.SetUpdatedAt(*t)
	}
	return qc
}

// SetDeleted sets the "deleted" field.
func (qc *QuotaCreate) SetDeleted(b bool) *QuotaCreate {
	qc.mutation.SetDeleted(b)
	return qc
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableDeleted(b *bool) *QuotaCreate {
	if b != nil {
		qc.SetDeleted(*b)
	}
	return qc
}

// SetUserID sets the "user_id" field.
func (qc *QuotaCreate) SetUserID(i int) *QuotaCreate {
	qc.mutation.SetUserID(i)
	return qc
}

// SetCategory sets the "category" field.
func (qc *QuotaCreate) SetCategory(q quota.Category) *QuotaCreate {
	qc.mutation.SetCategory(q)
	return qc
}

// SetDaily sets the "daily" field.
func (qc *QuotaCreate) SetDaily(i int) *QuotaCreate {
	qc.mutation.SetDaily(i)
	return qc
}

// SetNillableDaily sets the "daily" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableDaily(i *int) *QuotaCreate {
	if i != nil {
		qc.SetDaily(*i)
	}
	return qc
}

// SetMonthly sets the "monthly" field.
func (qc *QuotaCreate) SetMonthly(i int) *QuotaCreate {
	qc.mutation.SetMonthly(i)
	return qc
}

// SetNillableMonthly sets the "monthly" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableMonthly(i *int) *QuotaCreate {
	if i != nil {
		qc.SetMonthly(*i)
	}
	return qc
}

// SetYearly sets the "yearly" field.
func (qc *QuotaCreate) SetYearly(i int) *QuotaCreate {
	qc.mutation.SetYearly(i)
	return qc
}

// SetNillableYearly sets the "yearly" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableYearly(i *int) *QuotaCreate {
	if i != nil {
		qc.SetYearly(*i)
	}
	return qc
}

// SetDailyUsed sets the "daily_used" field.
func (qc *QuotaCreate) SetDailyUsed(i int) *QuotaCreate {
	qc.mutation.SetDailyUsed(i)
	return qc
}

// SetNillableDailyUsed sets the "daily_used" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableDailyUsed(i *int) *QuotaCreate {
	if i != nil {
		qc.SetDailyUsed(*i)
	}
	return qc
}

// SetMonthlyUsed sets the "monthly_used" field.
func (qc *QuotaCreate) SetMonthlyUsed(i int) *QuotaCreate {
	qc.mutation.SetMonthlyUsed(i)
	return qc
}

// SetNillableMonthlyUsed sets the "monthly_used" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableMonthlyUsed(i *int) *QuotaCreate {
	if i != nil {
		qc.SetMonthlyUsed(*i)
	}
	return qc
}

// SetYearlyUsed sets the "yearly_used" field.
func (qc *QuotaCreate) SetYearlyUsed(i int) *QuotaCreate {
	qc.mutation.SetYearlyUsed(i)
	return qc
}

// SetNillableYearlyUsed sets the "yearly_used" field if the given value is not nil.
func (qc *QuotaCreate) SetNillableYearlyUsed(i *int) *QuotaCreate {
	if i != nil {
		qc.SetYearlyUsed(*i)
	}
	return qc
}

// Mutation returns the QuotaMutation object of the builder.
func (qc *QuotaCreate) Mutation() *QuotaMutation {
	return qc.mutation
}

// Save creates the Quota in the database.
func (qc *QuotaCreate) Save(ctx context.Context) (*Quota, error) {
	var (
		err  error
		node *Quota
	)
	qc.defaults()
	if len(qc.hooks) == 0 {
		if err = qc.check(); err != nil {
			return nil, err
		}
		node, err = qc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuotaMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qc.check(); err != nil {
				return nil, err
			}
			qc.mutation = mutation
			if node, err = qc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(qc.hooks) - 1; i >= 0; i-- {
			if qc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = qc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, qc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Quota)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from QuotaMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qc *QuotaCreate) SaveX(ctx context.Context) *Quota {
	v, err := qc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qc *QuotaCreate) Exec(ctx context.Context) error {
	_, err := qc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qc *QuotaCreate) ExecX(ctx context.Context) {
	if err := qc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (qc *QuotaCreate) defaults() {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		v := quota.DefaultCreatedAt()
		qc.mutation.SetCreatedAt(v)
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		v := quota.DefaultUpdatedAt()
		qc.mutation.SetUpdatedAt(v)
	}
	if _, ok := qc.mutation.Deleted(); !ok {
		v := quota.DefaultDeleted
		qc.mutation.SetDeleted(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (qc *QuotaCreate) check() error {
	if _, ok := qc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Quota.created_at"`)}
	}
	if _, ok := qc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Quota.updated_at"`)}
	}
	if _, ok := qc.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Quota.deleted"`)}
	}
	if _, ok := qc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Quota.user_id"`)}
	}
	if _, ok := qc.mutation.Category(); !ok {
		return &ValidationError{Name: "category", err: errors.New(`ent: missing required field "Quota.category"`)}
	}
	if v, ok := qc.mutation.Category(); ok {
		if err := quota.CategoryValidator(v); err != nil {
			return &ValidationError{Name: "category", err: fmt.Errorf(`ent: validator failed for field "Quota.category": %w`, err)}
		}
	}
	return nil
}

func (qc *QuotaCreate) sqlSave(ctx context.Context) (*Quota, error) {
	_node, _spec := qc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (qc *QuotaCreate) createSpec() (*Quota, *sqlgraph.CreateSpec) {
	var (
		_node = &Quota{config: qc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: quota.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quota.FieldID,
			},
		}
	)
	_spec.OnConflict = qc.conflict
	if value, ok := qc.mutation.CreatedAt(); ok {
		_spec.SetField(quota.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := qc.mutation.UpdatedAt(); ok {
		_spec.SetField(quota.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := qc.mutation.Deleted(); ok {
		_spec.SetField(quota.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := qc.mutation.UserID(); ok {
		_spec.SetField(quota.FieldUserID, field.TypeInt, value)
		_node.UserID = value
	}
	if value, ok := qc.mutation.Category(); ok {
		_spec.SetField(quota.FieldCategory, field.TypeEnum, value)
		_node.Category = value
	}
	if value, ok := qc.mutation.Daily(); ok {
		_spec.SetField(quota.FieldDaily, field.TypeInt, value)
		_node.Daily = value
	}
	if value, ok := qc.mutation.Monthly(); ok {
		_spec.SetField(quota.FieldMonthly, field.TypeInt, value)
		_node.Monthly = value
	}
	if value, ok := qc.mutation.Yearly(); ok {
		_spec.SetField(quota.FieldYearly, field.TypeInt, value)
		_node.Yearly = value
	}
	if value, ok := qc.mutation.DailyUsed(); ok {
		_spec.SetField(quota.FieldDailyUsed, field.TypeInt, value)
		_node.DailyUsed = value
	}
	if value, ok := qc.mutation.MonthlyUsed(); ok {
		_spec.SetField(quota.FieldMonthlyUsed, field.TypeInt, value)
		_node.MonthlyUsed = value
	}
	if value, ok := qc.mutation.YearlyUsed(); ok {
		_spec.SetField(quota.FieldYearlyUsed, field.TypeInt, value)
		_node.YearlyUsed = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quota.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuotaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qc *QuotaCreate) OnConflict(opts ...sql.ConflictOption) *QuotaUpsertOne {
	qc.conflict = opts
	return &QuotaUpsertOne{
		create: qc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qc *QuotaCreate) OnConflictColumns(columns ...string) *QuotaUpsertOne {
	qc.conflict = append(qc.conflict, sql.ConflictColumns(columns...))
	return &QuotaUpsertOne{
		create: qc,
	}
}

type (
	// QuotaUpsertOne is the builder for "upsert"-ing
	//  one Quota node.
	QuotaUpsertOne struct {
		create *QuotaCreate
	}

	// QuotaUpsert is the "OnConflict" setter.
	QuotaUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *QuotaUpsert) SetUpdatedAt(v time.Time) *QuotaUpsert {
	u.Set(quota.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateUpdatedAt() *QuotaUpsert {
	u.SetExcluded(quota.FieldUpdatedAt)
	return u
}

// SetDeleted sets the "deleted" field.
func (u *QuotaUpsert) SetDeleted(v bool) *QuotaUpsert {
	u.Set(quota.FieldDeleted, v)
	return u
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateDeleted() *QuotaUpsert {
	u.SetExcluded(quota.FieldDeleted)
	return u
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsert) SetUserID(v int) *QuotaUpsert {
	u.Set(quota.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateUserID() *QuotaUpsert {
	u.SetExcluded(quota.FieldUserID)
	return u
}

// AddUserID adds v to the "user_id" field.
func (u *QuotaUpsert) AddUserID(v int) *QuotaUpsert {
	u.Add(quota.FieldUserID, v)
	return u
}

// SetCategory sets the "category" field.
func (u *QuotaUpsert) SetCategory(v quota.Category) *QuotaUpsert {
	u.Set(quota.FieldCategory, v)
	return u
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateCategory() *QuotaUpsert {
	u.SetExcluded(quota.FieldCategory)
	return u
}

// SetDaily sets the "daily" field.
func (u *QuotaUpsert) SetDaily(v int) *QuotaUpsert {
	u.Set(quota.FieldDaily, v)
	return u
}

// UpdateDaily sets the "daily" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateDaily() *QuotaUpsert {
	u.SetExcluded(quota.FieldDaily)
	return u
}

// AddDaily adds v to the "daily" field.
func (u *QuotaUpsert) AddDaily(v int) *QuotaUpsert {
	u.Add(quota.FieldDaily, v)
	return u
}

// ClearDaily clears the value of the "daily" field.
func (u *QuotaUpsert) ClearDaily() *QuotaUpsert {
	u.SetNull(quota.FieldDaily)
	return u
}

// SetMonthly sets the "monthly" field.
func (u *QuotaUpsert) SetMonthly(v int) *QuotaUpsert {
	u.Set(quota.FieldMonthly, v)
	return u
}

// UpdateMonthly sets the "monthly" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateMonthly() *QuotaUpsert {
	u.SetExcluded(quota.FieldMonthly)
	return u
}

// AddMonthly adds v to the "monthly" field.
func (u *QuotaUpsert) AddMonthly(v int) *QuotaUpsert {
	u.Add(quota.FieldMonthly, v)
	return u
}

// ClearMonthly clears the value of the "monthly" field.
func (u *QuotaUpsert) ClearMonthly() *QuotaUpsert {
	u.SetNull(quota.FieldMonthly)
	return u
}

// SetYearly sets the "yearly" field.
func (u *QuotaUpsert) SetYearly(v int) *QuotaUpsert {
	u.Set(quota.FieldYearly, v)
	return u
}

// UpdateYearly sets the "yearly" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateYearly() *QuotaUpsert {
	u.SetExcluded(quota.FieldYearly)
	return u
}

// AddYearly adds v to the "yearly" field.
func (u *QuotaUpsert) AddYearly(v int) *QuotaUpsert {
	u.Add(quota.FieldYearly, v)
	return u
}

// ClearYearly clears the value of the "yearly" field.
func (u *QuotaUpsert) ClearYearly() *QuotaUpsert {
	u.SetNull(quota.FieldYearly)
	return u
}

// SetDailyUsed sets the "daily_used" field.
func (u *QuotaUpsert) SetDailyUsed(v int) *QuotaUpsert {
	u.Set(quota.FieldDailyUsed, v)
	return u
}

// UpdateDailyUsed sets the "daily_used" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateDailyUsed() *QuotaUpsert {
	u.SetExcluded(quota.FieldDailyUsed)
	return u
}

// AddDailyUsed adds v to the "daily_used" field.
func (u *QuotaUpsert) AddDailyUsed(v int) *QuotaUpsert {
	u.Add(quota.FieldDailyUsed, v)
	return u
}

// ClearDailyUsed clears the value of the "daily_used" field.
func (u *QuotaUpsert) ClearDailyUsed() *QuotaUpsert {
	u.SetNull(quota.FieldDailyUsed)
	return u
}

// SetMonthlyUsed sets the "monthly_used" field.
func (u *QuotaUpsert) SetMonthlyUsed(v int) *QuotaUpsert {
	u.Set(quota.FieldMonthlyUsed, v)
	return u
}

// UpdateMonthlyUsed sets the "monthly_used" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateMonthlyUsed() *QuotaUpsert {
	u.SetExcluded(quota.FieldMonthlyUsed)
	return u
}

// AddMonthlyUsed adds v to the "monthly_used" field.
func (u *QuotaUpsert) AddMonthlyUsed(v int) *QuotaUpsert {
	u.Add(quota.FieldMonthlyUsed, v)
	return u
}

// ClearMonthlyUsed clears the value of the "monthly_used" field.
func (u *QuotaUpsert) ClearMonthlyUsed() *QuotaUpsert {
	u.SetNull(quota.FieldMonthlyUsed)
	return u
}

// SetYearlyUsed sets the "yearly_used" field.
func (u *QuotaUpsert) SetYearlyUsed(v int) *QuotaUpsert {
	u.Set(quota.FieldYearlyUsed, v)
	return u
}

// UpdateYearlyUsed sets the "yearly_used" field to the value that was provided on create.
func (u *QuotaUpsert) UpdateYearlyUsed() *QuotaUpsert {
	u.SetExcluded(quota.FieldYearlyUsed)
	return u
}

// AddYearlyUsed adds v to the "yearly_used" field.
func (u *QuotaUpsert) AddYearlyUsed(v int) *QuotaUpsert {
	u.Add(quota.FieldYearlyUsed, v)
	return u
}

// ClearYearlyUsed clears the value of the "yearly_used" field.
func (u *QuotaUpsert) ClearYearlyUsed() *QuotaUpsert {
	u.SetNull(quota.FieldYearlyUsed)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuotaUpsertOne) UpdateNewValues() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(quota.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *QuotaUpsertOne) Ignore() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuotaUpsertOne) DoNothing() *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuotaCreate.OnConflict
// documentation for more info.
func (u *QuotaUpsertOne) Update(set func(*QuotaUpsert)) *QuotaUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuotaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuotaUpsertOne) SetUpdatedAt(v time.Time) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateUpdatedAt() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *QuotaUpsertOne) SetDeleted(v bool) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateDeleted() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsertOne) SetUserID(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *QuotaUpsertOne) AddUserID(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateUserID() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUserID()
	})
}

// SetCategory sets the "category" field.
func (u *QuotaUpsertOne) SetCategory(v quota.Category) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateCategory() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateCategory()
	})
}

// SetDaily sets the "daily" field.
func (u *QuotaUpsertOne) SetDaily(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDaily(v)
	})
}

// AddDaily adds v to the "daily" field.
func (u *QuotaUpsertOne) AddDaily(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddDaily(v)
	})
}

// UpdateDaily sets the "daily" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateDaily() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDaily()
	})
}

// ClearDaily clears the value of the "daily" field.
func (u *QuotaUpsertOne) ClearDaily() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearDaily()
	})
}

// SetMonthly sets the "monthly" field.
func (u *QuotaUpsertOne) SetMonthly(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetMonthly(v)
	})
}

// AddMonthly adds v to the "monthly" field.
func (u *QuotaUpsertOne) AddMonthly(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddMonthly(v)
	})
}

// UpdateMonthly sets the "monthly" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateMonthly() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateMonthly()
	})
}

// ClearMonthly clears the value of the "monthly" field.
func (u *QuotaUpsertOne) ClearMonthly() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearMonthly()
	})
}

// SetYearly sets the "yearly" field.
func (u *QuotaUpsertOne) SetYearly(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetYearly(v)
	})
}

// AddYearly adds v to the "yearly" field.
func (u *QuotaUpsertOne) AddYearly(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddYearly(v)
	})
}

// UpdateYearly sets the "yearly" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateYearly() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateYearly()
	})
}

// ClearYearly clears the value of the "yearly" field.
func (u *QuotaUpsertOne) ClearYearly() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearYearly()
	})
}

// SetDailyUsed sets the "daily_used" field.
func (u *QuotaUpsertOne) SetDailyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDailyUsed(v)
	})
}

// AddDailyUsed adds v to the "daily_used" field.
func (u *QuotaUpsertOne) AddDailyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddDailyUsed(v)
	})
}

// UpdateDailyUsed sets the "daily_used" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateDailyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDailyUsed()
	})
}

// ClearDailyUsed clears the value of the "daily_used" field.
func (u *QuotaUpsertOne) ClearDailyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearDailyUsed()
	})
}

// SetMonthlyUsed sets the "monthly_used" field.
func (u *QuotaUpsertOne) SetMonthlyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetMonthlyUsed(v)
	})
}

// AddMonthlyUsed adds v to the "monthly_used" field.
func (u *QuotaUpsertOne) AddMonthlyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddMonthlyUsed(v)
	})
}

// UpdateMonthlyUsed sets the "monthly_used" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateMonthlyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateMonthlyUsed()
	})
}

// ClearMonthlyUsed clears the value of the "monthly_used" field.
func (u *QuotaUpsertOne) ClearMonthlyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearMonthlyUsed()
	})
}

// SetYearlyUsed sets the "yearly_used" field.
func (u *QuotaUpsertOne) SetYearlyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.SetYearlyUsed(v)
	})
}

// AddYearlyUsed adds v to the "yearly_used" field.
func (u *QuotaUpsertOne) AddYearlyUsed(v int) *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.AddYearlyUsed(v)
	})
}

// UpdateYearlyUsed sets the "yearly_used" field to the value that was provided on create.
func (u *QuotaUpsertOne) UpdateYearlyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateYearlyUsed()
	})
}

// ClearYearlyUsed clears the value of the "yearly_used" field.
func (u *QuotaUpsertOne) ClearYearlyUsed() *QuotaUpsertOne {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearYearlyUsed()
	})
}

// Exec executes the query.
func (u *QuotaUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuotaCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuotaUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *QuotaUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *QuotaUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// QuotaCreateBulk is the builder for creating many Quota entities in bulk.
type QuotaCreateBulk struct {
	config
	builders []*QuotaCreate
	conflict []sql.ConflictOption
}

// Save creates the Quota entities in the database.
func (qcb *QuotaCreateBulk) Save(ctx context.Context) ([]*Quota, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qcb.builders))
	nodes := make([]*Quota, len(qcb.builders))
	mutators := make([]Mutator, len(qcb.builders))
	for i := range qcb.builders {
		func(i int, root context.Context) {
			builder := qcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuotaMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = qcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qcb *QuotaCreateBulk) SaveX(ctx context.Context) []*Quota {
	v, err := qcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (qcb *QuotaCreateBulk) Exec(ctx context.Context) error {
	_, err := qcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qcb *QuotaCreateBulk) ExecX(ctx context.Context) {
	if err := qcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Quota.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.QuotaUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (qcb *QuotaCreateBulk) OnConflict(opts ...sql.ConflictOption) *QuotaUpsertBulk {
	qcb.conflict = opts
	return &QuotaUpsertBulk{
		create: qcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (qcb *QuotaCreateBulk) OnConflictColumns(columns ...string) *QuotaUpsertBulk {
	qcb.conflict = append(qcb.conflict, sql.ConflictColumns(columns...))
	return &QuotaUpsertBulk{
		create: qcb,
	}
}

// QuotaUpsertBulk is the builder for "upsert"-ing
// a bulk of Quota nodes.
type QuotaUpsertBulk struct {
	create *QuotaCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *QuotaUpsertBulk) UpdateNewValues() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(quota.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Quota.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *QuotaUpsertBulk) Ignore() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *QuotaUpsertBulk) DoNothing() *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the QuotaCreateBulk.OnConflict
// documentation for more info.
func (u *QuotaUpsertBulk) Update(set func(*QuotaUpsert)) *QuotaUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&QuotaUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *QuotaUpsertBulk) SetUpdatedAt(v time.Time) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateUpdatedAt() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeleted sets the "deleted" field.
func (u *QuotaUpsertBulk) SetDeleted(v bool) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDeleted(v)
	})
}

// UpdateDeleted sets the "deleted" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateDeleted() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDeleted()
	})
}

// SetUserID sets the "user_id" field.
func (u *QuotaUpsertBulk) SetUserID(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetUserID(v)
	})
}

// AddUserID adds v to the "user_id" field.
func (u *QuotaUpsertBulk) AddUserID(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateUserID() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateUserID()
	})
}

// SetCategory sets the "category" field.
func (u *QuotaUpsertBulk) SetCategory(v quota.Category) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetCategory(v)
	})
}

// UpdateCategory sets the "category" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateCategory() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateCategory()
	})
}

// SetDaily sets the "daily" field.
func (u *QuotaUpsertBulk) SetDaily(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDaily(v)
	})
}

// AddDaily adds v to the "daily" field.
func (u *QuotaUpsertBulk) AddDaily(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddDaily(v)
	})
}

// UpdateDaily sets the "daily" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateDaily() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDaily()
	})
}

// ClearDaily clears the value of the "daily" field.
func (u *QuotaUpsertBulk) ClearDaily() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearDaily()
	})
}

// SetMonthly sets the "monthly" field.
func (u *QuotaUpsertBulk) SetMonthly(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetMonthly(v)
	})
}

// AddMonthly adds v to the "monthly" field.
func (u *QuotaUpsertBulk) AddMonthly(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddMonthly(v)
	})
}

// UpdateMonthly sets the "monthly" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateMonthly() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateMonthly()
	})
}

// ClearMonthly clears the value of the "monthly" field.
func (u *QuotaUpsertBulk) ClearMonthly() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearMonthly()
	})
}

// SetYearly sets the "yearly" field.
func (u *QuotaUpsertBulk) SetYearly(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetYearly(v)
	})
}

// AddYearly adds v to the "yearly" field.
func (u *QuotaUpsertBulk) AddYearly(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddYearly(v)
	})
}

// UpdateYearly sets the "yearly" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateYearly() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateYearly()
	})
}

// ClearYearly clears the value of the "yearly" field.
func (u *QuotaUpsertBulk) ClearYearly() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearYearly()
	})
}

// SetDailyUsed sets the "daily_used" field.
func (u *QuotaUpsertBulk) SetDailyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetDailyUsed(v)
	})
}

// AddDailyUsed adds v to the "daily_used" field.
func (u *QuotaUpsertBulk) AddDailyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddDailyUsed(v)
	})
}

// UpdateDailyUsed sets the "daily_used" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateDailyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateDailyUsed()
	})
}

// ClearDailyUsed clears the value of the "daily_used" field.
func (u *QuotaUpsertBulk) ClearDailyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearDailyUsed()
	})
}

// SetMonthlyUsed sets the "monthly_used" field.
func (u *QuotaUpsertBulk) SetMonthlyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetMonthlyUsed(v)
	})
}

// AddMonthlyUsed adds v to the "monthly_used" field.
func (u *QuotaUpsertBulk) AddMonthlyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddMonthlyUsed(v)
	})
}

// UpdateMonthlyUsed sets the "monthly_used" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateMonthlyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateMonthlyUsed()
	})
}

// ClearMonthlyUsed clears the value of the "monthly_used" field.
func (u *QuotaUpsertBulk) ClearMonthlyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearMonthlyUsed()
	})
}

// SetYearlyUsed sets the "yearly_used" field.
func (u *QuotaUpsertBulk) SetYearlyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.SetYearlyUsed(v)
	})
}

// AddYearlyUsed adds v to the "yearly_used" field.
func (u *QuotaUpsertBulk) AddYearlyUsed(v int) *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.AddYearlyUsed(v)
	})
}

// UpdateYearlyUsed sets the "yearly_used" field to the value that was provided on create.
func (u *QuotaUpsertBulk) UpdateYearlyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.UpdateYearlyUsed()
	})
}

// ClearYearlyUsed clears the value of the "yearly_used" field.
func (u *QuotaUpsertBulk) ClearYearlyUsed() *QuotaUpsertBulk {
	return u.Update(func(s *QuotaUpsert) {
		s.ClearYearlyUsed()
	})
}

// Exec executes the query.
func (u *QuotaUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the QuotaCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for QuotaCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *QuotaUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
