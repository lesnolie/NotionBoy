// Code generated by ent, DO NOT EDIT.

package conversationmessage

import (
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// UUID applies equality check predicate on the "uuid" field. It's identical to UUIDEQ.
func UUID(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ConversationID applies equality check predicate on the "conversation_id" field. It's identical to ConversationIDEQ.
func ConversationID(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversationID), v))
	})
}

// Request applies equality check predicate on the "request" field. It's identical to RequestEQ.
func Request(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequest), v))
	})
}

// Response applies equality check predicate on the "response" field. It's identical to ResponseEQ.
func Response(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponse), v))
	})
}

// TokenUsage applies equality check predicate on the "token_usage" field. It's identical to TokenUsageEQ.
func TokenUsage(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenUsage), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// UUIDEQ applies the EQ predicate on the "uuid" field.
func UUIDEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUUID), v))
	})
}

// UUIDNEQ applies the NEQ predicate on the "uuid" field.
func UUIDNEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUUID), v))
	})
}

// UUIDIn applies the In predicate on the "uuid" field.
func UUIDIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUUID), v...))
	})
}

// UUIDNotIn applies the NotIn predicate on the "uuid" field.
func UUIDNotIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUUID), v...))
	})
}

// UUIDGT applies the GT predicate on the "uuid" field.
func UUIDGT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUUID), v))
	})
}

// UUIDGTE applies the GTE predicate on the "uuid" field.
func UUIDGTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUUID), v))
	})
}

// UUIDLT applies the LT predicate on the "uuid" field.
func UUIDLT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUUID), v))
	})
}

// UUIDLTE applies the LTE predicate on the "uuid" field.
func UUIDLTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUUID), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// ConversationIDEQ applies the EQ predicate on the "conversation_id" field.
func ConversationIDEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConversationID), v))
	})
}

// ConversationIDNEQ applies the NEQ predicate on the "conversation_id" field.
func ConversationIDNEQ(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConversationID), v))
	})
}

// ConversationIDIn applies the In predicate on the "conversation_id" field.
func ConversationIDIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldConversationID), v...))
	})
}

// ConversationIDNotIn applies the NotIn predicate on the "conversation_id" field.
func ConversationIDNotIn(vs ...uuid.UUID) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldConversationID), v...))
	})
}

// ConversationIDGT applies the GT predicate on the "conversation_id" field.
func ConversationIDGT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConversationID), v))
	})
}

// ConversationIDGTE applies the GTE predicate on the "conversation_id" field.
func ConversationIDGTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConversationID), v))
	})
}

// ConversationIDLT applies the LT predicate on the "conversation_id" field.
func ConversationIDLT(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConversationID), v))
	})
}

// ConversationIDLTE applies the LTE predicate on the "conversation_id" field.
func ConversationIDLTE(v uuid.UUID) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConversationID), v))
	})
}

// RequestEQ applies the EQ predicate on the "request" field.
func RequestEQ(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRequest), v))
	})
}

// RequestNEQ applies the NEQ predicate on the "request" field.
func RequestNEQ(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRequest), v))
	})
}

// RequestIn applies the In predicate on the "request" field.
func RequestIn(vs ...string) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRequest), v...))
	})
}

// RequestNotIn applies the NotIn predicate on the "request" field.
func RequestNotIn(vs ...string) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRequest), v...))
	})
}

// RequestGT applies the GT predicate on the "request" field.
func RequestGT(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRequest), v))
	})
}

// RequestGTE applies the GTE predicate on the "request" field.
func RequestGTE(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRequest), v))
	})
}

// RequestLT applies the LT predicate on the "request" field.
func RequestLT(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRequest), v))
	})
}

// RequestLTE applies the LTE predicate on the "request" field.
func RequestLTE(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRequest), v))
	})
}

// RequestContains applies the Contains predicate on the "request" field.
func RequestContains(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRequest), v))
	})
}

// RequestHasPrefix applies the HasPrefix predicate on the "request" field.
func RequestHasPrefix(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRequest), v))
	})
}

// RequestHasSuffix applies the HasSuffix predicate on the "request" field.
func RequestHasSuffix(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRequest), v))
	})
}

// RequestIsNil applies the IsNil predicate on the "request" field.
func RequestIsNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRequest)))
	})
}

// RequestNotNil applies the NotNil predicate on the "request" field.
func RequestNotNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRequest)))
	})
}

// RequestEqualFold applies the EqualFold predicate on the "request" field.
func RequestEqualFold(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRequest), v))
	})
}

// RequestContainsFold applies the ContainsFold predicate on the "request" field.
func RequestContainsFold(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRequest), v))
	})
}

// ResponseEQ applies the EQ predicate on the "response" field.
func ResponseEQ(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResponse), v))
	})
}

// ResponseNEQ applies the NEQ predicate on the "response" field.
func ResponseNEQ(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResponse), v))
	})
}

// ResponseIn applies the In predicate on the "response" field.
func ResponseIn(vs ...string) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResponse), v...))
	})
}

// ResponseNotIn applies the NotIn predicate on the "response" field.
func ResponseNotIn(vs ...string) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResponse), v...))
	})
}

// ResponseGT applies the GT predicate on the "response" field.
func ResponseGT(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResponse), v))
	})
}

// ResponseGTE applies the GTE predicate on the "response" field.
func ResponseGTE(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResponse), v))
	})
}

// ResponseLT applies the LT predicate on the "response" field.
func ResponseLT(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResponse), v))
	})
}

// ResponseLTE applies the LTE predicate on the "response" field.
func ResponseLTE(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResponse), v))
	})
}

// ResponseContains applies the Contains predicate on the "response" field.
func ResponseContains(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResponse), v))
	})
}

// ResponseHasPrefix applies the HasPrefix predicate on the "response" field.
func ResponseHasPrefix(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResponse), v))
	})
}

// ResponseHasSuffix applies the HasSuffix predicate on the "response" field.
func ResponseHasSuffix(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResponse), v))
	})
}

// ResponseIsNil applies the IsNil predicate on the "response" field.
func ResponseIsNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResponse)))
	})
}

// ResponseNotNil applies the NotNil predicate on the "response" field.
func ResponseNotNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResponse)))
	})
}

// ResponseEqualFold applies the EqualFold predicate on the "response" field.
func ResponseEqualFold(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResponse), v))
	})
}

// ResponseContainsFold applies the ContainsFold predicate on the "response" field.
func ResponseContainsFold(v string) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResponse), v))
	})
}

// TokenUsageEQ applies the EQ predicate on the "token_usage" field.
func TokenUsageEQ(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageNEQ applies the NEQ predicate on the "token_usage" field.
func TokenUsageNEQ(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageIn applies the In predicate on the "token_usage" field.
func TokenUsageIn(vs ...int) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTokenUsage), v...))
	})
}

// TokenUsageNotIn applies the NotIn predicate on the "token_usage" field.
func TokenUsageNotIn(vs ...int) predicate.ConversationMessage {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTokenUsage), v...))
	})
}

// TokenUsageGT applies the GT predicate on the "token_usage" field.
func TokenUsageGT(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageGTE applies the GTE predicate on the "token_usage" field.
func TokenUsageGTE(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageLT applies the LT predicate on the "token_usage" field.
func TokenUsageLT(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageLTE applies the LTE predicate on the "token_usage" field.
func TokenUsageLTE(v int) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTokenUsage), v))
	})
}

// TokenUsageIsNil applies the IsNil predicate on the "token_usage" field.
func TokenUsageIsNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTokenUsage)))
	})
}

// TokenUsageNotNil applies the NotNil predicate on the "token_usage" field.
func TokenUsageNotNil() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTokenUsage)))
	})
}

// HasConversations applies the HasEdge predicate on the "conversations" edge.
func HasConversations() predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConversationsTable, ConversationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasConversationsWith applies the HasEdge predicate on the "conversations" edge with a given conditions (other predicates).
func HasConversationsWith(preds ...predicate.Conversation) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ConversationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ConversationsTable, ConversationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ConversationMessage) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ConversationMessage) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ConversationMessage) predicate.ConversationMessage {
	return predicate.ConversationMessage(func(s *sql.Selector) {
		p(s.Not())
	})
}
