// Code generated by ent, DO NOT EDIT.

package wechatsession

import (
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// Session applies equality check predicate on the "session" field. It's identical to SessionEQ.
func Session(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSession), v))
	})
}

// DummyUserID applies equality check predicate on the "dummy_user_id" field. It's identical to DummyUserIDEQ.
func DummyUserID(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDummyUserID), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// SessionEQ applies the EQ predicate on the "session" field.
func SessionEQ(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSession), v))
	})
}

// SessionNEQ applies the NEQ predicate on the "session" field.
func SessionNEQ(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSession), v))
	})
}

// SessionIn applies the In predicate on the "session" field.
func SessionIn(vs ...[]byte) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldSession), v...))
	})
}

// SessionNotIn applies the NotIn predicate on the "session" field.
func SessionNotIn(vs ...[]byte) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldSession), v...))
	})
}

// SessionGT applies the GT predicate on the "session" field.
func SessionGT(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSession), v))
	})
}

// SessionGTE applies the GTE predicate on the "session" field.
func SessionGTE(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSession), v))
	})
}

// SessionLT applies the LT predicate on the "session" field.
func SessionLT(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSession), v))
	})
}

// SessionLTE applies the LTE predicate on the "session" field.
func SessionLTE(v []byte) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSession), v))
	})
}

// DummyUserIDEQ applies the EQ predicate on the "dummy_user_id" field.
func DummyUserIDEQ(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDNEQ applies the NEQ predicate on the "dummy_user_id" field.
func DummyUserIDNEQ(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDIn applies the In predicate on the "dummy_user_id" field.
func DummyUserIDIn(vs ...string) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDummyUserID), v...))
	})
}

// DummyUserIDNotIn applies the NotIn predicate on the "dummy_user_id" field.
func DummyUserIDNotIn(vs ...string) predicate.WechatSession {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDummyUserID), v...))
	})
}

// DummyUserIDGT applies the GT predicate on the "dummy_user_id" field.
func DummyUserIDGT(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDGTE applies the GTE predicate on the "dummy_user_id" field.
func DummyUserIDGTE(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDLT applies the LT predicate on the "dummy_user_id" field.
func DummyUserIDLT(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDLTE applies the LTE predicate on the "dummy_user_id" field.
func DummyUserIDLTE(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDContains applies the Contains predicate on the "dummy_user_id" field.
func DummyUserIDContains(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDHasPrefix applies the HasPrefix predicate on the "dummy_user_id" field.
func DummyUserIDHasPrefix(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDHasSuffix applies the HasSuffix predicate on the "dummy_user_id" field.
func DummyUserIDHasSuffix(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDEqualFold applies the EqualFold predicate on the "dummy_user_id" field.
func DummyUserIDEqualFold(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDummyUserID), v))
	})
}

// DummyUserIDContainsFold applies the ContainsFold predicate on the "dummy_user_id" field.
func DummyUserIDContainsFold(v string) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDummyUserID), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WechatSession) predicate.WechatSession {
	return predicate.WechatSession(func(s *sql.Selector) {
		p(s.Not())
	})
}
