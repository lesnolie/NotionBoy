// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"notionboy/db/ent/account"
	"notionboy/db/ent/predicate"
	"notionboy/db/ent/wechatsession"
	"sync"
	"time"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAccount       = "Account"
	TypeWechatSession = "WechatSession"
)

// AccountMutation represents an operation that mutates the Account nodes in the graph.
type AccountMutation struct {
	config
	op                 Op
	typ                string
	id                 *int
	created_at         *time.Time
	updated_at         *time.Time
	deleted            *bool
	user_id            *string
	user_type          *account.UserType
	database_id        *string
	access_token       *string
	notion_user_id     *string
	notion_user_email  *string
	is_latest_schema   *bool
	is_openai_api_user *bool
	clearedFields      map[string]struct{}
	done               bool
	oldValue           func(context.Context) (*Account, error)
	predicates         []predicate.Account
}

var _ ent.Mutation = (*AccountMutation)(nil)

// accountOption allows management of the mutation configuration using functional options.
type accountOption func(*AccountMutation)

// newAccountMutation creates new mutation for the Account entity.
func newAccountMutation(c config, op Op, opts ...accountOption) *AccountMutation {
	m := &AccountMutation{
		config:        c,
		op:            op,
		typ:           TypeAccount,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAccountID sets the ID field of the mutation.
func withAccountID(id int) accountOption {
	return func(m *AccountMutation) {
		var (
			err   error
			once  sync.Once
			value *Account
		)
		m.oldValue = func(ctx context.Context) (*Account, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Account.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAccount sets the old Account of the mutation.
func withAccount(node *Account) accountOption {
	return func(m *AccountMutation) {
		m.oldValue = func(context.Context) (*Account, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AccountMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AccountMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *AccountMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *AccountMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Account.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *AccountMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *AccountMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *AccountMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *AccountMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *AccountMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *AccountMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *AccountMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *AccountMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *AccountMutation) ResetDeleted() {
	m.deleted = nil
}

// SetUserID sets the "user_id" field.
func (m *AccountMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *AccountMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *AccountMutation) ResetUserID() {
	m.user_id = nil
}

// SetUserType sets the "user_type" field.
func (m *AccountMutation) SetUserType(at account.UserType) {
	m.user_type = &at
}

// UserType returns the value of the "user_type" field in the mutation.
func (m *AccountMutation) UserType() (r account.UserType, exists bool) {
	v := m.user_type
	if v == nil {
		return
	}
	return *v, true
}

// OldUserType returns the old "user_type" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldUserType(ctx context.Context) (v account.UserType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserType: %w", err)
	}
	return oldValue.UserType, nil
}

// ClearUserType clears the value of the "user_type" field.
func (m *AccountMutation) ClearUserType() {
	m.user_type = nil
	m.clearedFields[account.FieldUserType] = struct{}{}
}

// UserTypeCleared returns if the "user_type" field was cleared in this mutation.
func (m *AccountMutation) UserTypeCleared() bool {
	_, ok := m.clearedFields[account.FieldUserType]
	return ok
}

// ResetUserType resets all changes to the "user_type" field.
func (m *AccountMutation) ResetUserType() {
	m.user_type = nil
	delete(m.clearedFields, account.FieldUserType)
}

// SetDatabaseID sets the "database_id" field.
func (m *AccountMutation) SetDatabaseID(s string) {
	m.database_id = &s
}

// DatabaseID returns the value of the "database_id" field in the mutation.
func (m *AccountMutation) DatabaseID() (r string, exists bool) {
	v := m.database_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDatabaseID returns the old "database_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldDatabaseID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDatabaseID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDatabaseID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDatabaseID: %w", err)
	}
	return oldValue.DatabaseID, nil
}

// ResetDatabaseID resets all changes to the "database_id" field.
func (m *AccountMutation) ResetDatabaseID() {
	m.database_id = nil
}

// SetAccessToken sets the "access_token" field.
func (m *AccountMutation) SetAccessToken(s string) {
	m.access_token = &s
}

// AccessToken returns the value of the "access_token" field in the mutation.
func (m *AccountMutation) AccessToken() (r string, exists bool) {
	v := m.access_token
	if v == nil {
		return
	}
	return *v, true
}

// OldAccessToken returns the old "access_token" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldAccessToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAccessToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAccessToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAccessToken: %w", err)
	}
	return oldValue.AccessToken, nil
}

// ResetAccessToken resets all changes to the "access_token" field.
func (m *AccountMutation) ResetAccessToken() {
	m.access_token = nil
}

// SetNotionUserID sets the "notion_user_id" field.
func (m *AccountMutation) SetNotionUserID(s string) {
	m.notion_user_id = &s
}

// NotionUserID returns the value of the "notion_user_id" field in the mutation.
func (m *AccountMutation) NotionUserID() (r string, exists bool) {
	v := m.notion_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionUserID returns the old "notion_user_id" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNotionUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionUserID: %w", err)
	}
	return oldValue.NotionUserID, nil
}

// ClearNotionUserID clears the value of the "notion_user_id" field.
func (m *AccountMutation) ClearNotionUserID() {
	m.notion_user_id = nil
	m.clearedFields[account.FieldNotionUserID] = struct{}{}
}

// NotionUserIDCleared returns if the "notion_user_id" field was cleared in this mutation.
func (m *AccountMutation) NotionUserIDCleared() bool {
	_, ok := m.clearedFields[account.FieldNotionUserID]
	return ok
}

// ResetNotionUserID resets all changes to the "notion_user_id" field.
func (m *AccountMutation) ResetNotionUserID() {
	m.notion_user_id = nil
	delete(m.clearedFields, account.FieldNotionUserID)
}

// SetNotionUserEmail sets the "notion_user_email" field.
func (m *AccountMutation) SetNotionUserEmail(s string) {
	m.notion_user_email = &s
}

// NotionUserEmail returns the value of the "notion_user_email" field in the mutation.
func (m *AccountMutation) NotionUserEmail() (r string, exists bool) {
	v := m.notion_user_email
	if v == nil {
		return
	}
	return *v, true
}

// OldNotionUserEmail returns the old "notion_user_email" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldNotionUserEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNotionUserEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNotionUserEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNotionUserEmail: %w", err)
	}
	return oldValue.NotionUserEmail, nil
}

// ClearNotionUserEmail clears the value of the "notion_user_email" field.
func (m *AccountMutation) ClearNotionUserEmail() {
	m.notion_user_email = nil
	m.clearedFields[account.FieldNotionUserEmail] = struct{}{}
}

// NotionUserEmailCleared returns if the "notion_user_email" field was cleared in this mutation.
func (m *AccountMutation) NotionUserEmailCleared() bool {
	_, ok := m.clearedFields[account.FieldNotionUserEmail]
	return ok
}

// ResetNotionUserEmail resets all changes to the "notion_user_email" field.
func (m *AccountMutation) ResetNotionUserEmail() {
	m.notion_user_email = nil
	delete(m.clearedFields, account.FieldNotionUserEmail)
}

// SetIsLatestSchema sets the "is_latest_schema" field.
func (m *AccountMutation) SetIsLatestSchema(b bool) {
	m.is_latest_schema = &b
}

// IsLatestSchema returns the value of the "is_latest_schema" field in the mutation.
func (m *AccountMutation) IsLatestSchema() (r bool, exists bool) {
	v := m.is_latest_schema
	if v == nil {
		return
	}
	return *v, true
}

// OldIsLatestSchema returns the old "is_latest_schema" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsLatestSchema(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsLatestSchema is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsLatestSchema requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsLatestSchema: %w", err)
	}
	return oldValue.IsLatestSchema, nil
}

// ResetIsLatestSchema resets all changes to the "is_latest_schema" field.
func (m *AccountMutation) ResetIsLatestSchema() {
	m.is_latest_schema = nil
}

// SetIsOpenaiAPIUser sets the "is_openai_api_user" field.
func (m *AccountMutation) SetIsOpenaiAPIUser(b bool) {
	m.is_openai_api_user = &b
}

// IsOpenaiAPIUser returns the value of the "is_openai_api_user" field in the mutation.
func (m *AccountMutation) IsOpenaiAPIUser() (r bool, exists bool) {
	v := m.is_openai_api_user
	if v == nil {
		return
	}
	return *v, true
}

// OldIsOpenaiAPIUser returns the old "is_openai_api_user" field's value of the Account entity.
// If the Account object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AccountMutation) OldIsOpenaiAPIUser(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsOpenaiAPIUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsOpenaiAPIUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsOpenaiAPIUser: %w", err)
	}
	return oldValue.IsOpenaiAPIUser, nil
}

// ResetIsOpenaiAPIUser resets all changes to the "is_openai_api_user" field.
func (m *AccountMutation) ResetIsOpenaiAPIUser() {
	m.is_openai_api_user = nil
}

// Where appends a list predicates to the AccountMutation builder.
func (m *AccountMutation) Where(ps ...predicate.Account) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *AccountMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Account).
func (m *AccountMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AccountMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, account.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, account.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, account.FieldDeleted)
	}
	if m.user_id != nil {
		fields = append(fields, account.FieldUserID)
	}
	if m.user_type != nil {
		fields = append(fields, account.FieldUserType)
	}
	if m.database_id != nil {
		fields = append(fields, account.FieldDatabaseID)
	}
	if m.access_token != nil {
		fields = append(fields, account.FieldAccessToken)
	}
	if m.notion_user_id != nil {
		fields = append(fields, account.FieldNotionUserID)
	}
	if m.notion_user_email != nil {
		fields = append(fields, account.FieldNotionUserEmail)
	}
	if m.is_latest_schema != nil {
		fields = append(fields, account.FieldIsLatestSchema)
	}
	if m.is_openai_api_user != nil {
		fields = append(fields, account.FieldIsOpenaiAPIUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AccountMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case account.FieldCreatedAt:
		return m.CreatedAt()
	case account.FieldUpdatedAt:
		return m.UpdatedAt()
	case account.FieldDeleted:
		return m.Deleted()
	case account.FieldUserID:
		return m.UserID()
	case account.FieldUserType:
		return m.UserType()
	case account.FieldDatabaseID:
		return m.DatabaseID()
	case account.FieldAccessToken:
		return m.AccessToken()
	case account.FieldNotionUserID:
		return m.NotionUserID()
	case account.FieldNotionUserEmail:
		return m.NotionUserEmail()
	case account.FieldIsLatestSchema:
		return m.IsLatestSchema()
	case account.FieldIsOpenaiAPIUser:
		return m.IsOpenaiAPIUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AccountMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case account.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case account.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case account.FieldDeleted:
		return m.OldDeleted(ctx)
	case account.FieldUserID:
		return m.OldUserID(ctx)
	case account.FieldUserType:
		return m.OldUserType(ctx)
	case account.FieldDatabaseID:
		return m.OldDatabaseID(ctx)
	case account.FieldAccessToken:
		return m.OldAccessToken(ctx)
	case account.FieldNotionUserID:
		return m.OldNotionUserID(ctx)
	case account.FieldNotionUserEmail:
		return m.OldNotionUserEmail(ctx)
	case account.FieldIsLatestSchema:
		return m.OldIsLatestSchema(ctx)
	case account.FieldIsOpenaiAPIUser:
		return m.OldIsOpenaiAPIUser(ctx)
	}
	return nil, fmt.Errorf("unknown Account field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) SetField(name string, value ent.Value) error {
	switch name {
	case account.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case account.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case account.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case account.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case account.FieldUserType:
		v, ok := value.(account.UserType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserType(v)
		return nil
	case account.FieldDatabaseID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDatabaseID(v)
		return nil
	case account.FieldAccessToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAccessToken(v)
		return nil
	case account.FieldNotionUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionUserID(v)
		return nil
	case account.FieldNotionUserEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNotionUserEmail(v)
		return nil
	case account.FieldIsLatestSchema:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsLatestSchema(v)
		return nil
	case account.FieldIsOpenaiAPIUser:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsOpenaiAPIUser(v)
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AccountMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AccountMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AccountMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Account numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AccountMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(account.FieldUserType) {
		fields = append(fields, account.FieldUserType)
	}
	if m.FieldCleared(account.FieldNotionUserID) {
		fields = append(fields, account.FieldNotionUserID)
	}
	if m.FieldCleared(account.FieldNotionUserEmail) {
		fields = append(fields, account.FieldNotionUserEmail)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AccountMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AccountMutation) ClearField(name string) error {
	switch name {
	case account.FieldUserType:
		m.ClearUserType()
		return nil
	case account.FieldNotionUserID:
		m.ClearNotionUserID()
		return nil
	case account.FieldNotionUserEmail:
		m.ClearNotionUserEmail()
		return nil
	}
	return fmt.Errorf("unknown Account nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AccountMutation) ResetField(name string) error {
	switch name {
	case account.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case account.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case account.FieldDeleted:
		m.ResetDeleted()
		return nil
	case account.FieldUserID:
		m.ResetUserID()
		return nil
	case account.FieldUserType:
		m.ResetUserType()
		return nil
	case account.FieldDatabaseID:
		m.ResetDatabaseID()
		return nil
	case account.FieldAccessToken:
		m.ResetAccessToken()
		return nil
	case account.FieldNotionUserID:
		m.ResetNotionUserID()
		return nil
	case account.FieldNotionUserEmail:
		m.ResetNotionUserEmail()
		return nil
	case account.FieldIsLatestSchema:
		m.ResetIsLatestSchema()
		return nil
	case account.FieldIsOpenaiAPIUser:
		m.ResetIsOpenaiAPIUser()
		return nil
	}
	return fmt.Errorf("unknown Account field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AccountMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AccountMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AccountMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AccountMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AccountMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AccountMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AccountMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Account unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AccountMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Account edge %s", name)
}

// WechatSessionMutation represents an operation that mutates the WechatSession nodes in the graph.
type WechatSessionMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	updated_at    *time.Time
	deleted       *bool
	session       *[]byte
	dummy_user_id *string
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*WechatSession, error)
	predicates    []predicate.WechatSession
}

var _ ent.Mutation = (*WechatSessionMutation)(nil)

// wechatsessionOption allows management of the mutation configuration using functional options.
type wechatsessionOption func(*WechatSessionMutation)

// newWechatSessionMutation creates new mutation for the WechatSession entity.
func newWechatSessionMutation(c config, op Op, opts ...wechatsessionOption) *WechatSessionMutation {
	m := &WechatSessionMutation{
		config:        c,
		op:            op,
		typ:           TypeWechatSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWechatSessionID sets the ID field of the mutation.
func withWechatSessionID(id int) wechatsessionOption {
	return func(m *WechatSessionMutation) {
		var (
			err   error
			once  sync.Once
			value *WechatSession
		)
		m.oldValue = func(ctx context.Context) (*WechatSession, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().WechatSession.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWechatSession sets the old WechatSession of the mutation.
func withWechatSession(node *WechatSession) wechatsessionOption {
	return func(m *WechatSessionMutation) {
		m.oldValue = func(context.Context) (*WechatSession, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WechatSessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WechatSessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WechatSessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WechatSessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().WechatSession.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WechatSessionMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WechatSessionMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WechatSessionMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WechatSessionMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WechatSessionMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WechatSessionMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetDeleted sets the "deleted" field.
func (m *WechatSessionMutation) SetDeleted(b bool) {
	m.deleted = &b
}

// Deleted returns the value of the "deleted" field in the mutation.
func (m *WechatSessionMutation) Deleted() (r bool, exists bool) {
	v := m.deleted
	if v == nil {
		return
	}
	return *v, true
}

// OldDeleted returns the old "deleted" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldDeleted(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeleted is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeleted requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeleted: %w", err)
	}
	return oldValue.Deleted, nil
}

// ResetDeleted resets all changes to the "deleted" field.
func (m *WechatSessionMutation) ResetDeleted() {
	m.deleted = nil
}

// SetSession sets the "session" field.
func (m *WechatSessionMutation) SetSession(b []byte) {
	m.session = &b
}

// Session returns the value of the "session" field in the mutation.
func (m *WechatSessionMutation) Session() (r []byte, exists bool) {
	v := m.session
	if v == nil {
		return
	}
	return *v, true
}

// OldSession returns the old "session" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldSession(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSession is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSession requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSession: %w", err)
	}
	return oldValue.Session, nil
}

// ResetSession resets all changes to the "session" field.
func (m *WechatSessionMutation) ResetSession() {
	m.session = nil
}

// SetDummyUserID sets the "dummy_user_id" field.
func (m *WechatSessionMutation) SetDummyUserID(s string) {
	m.dummy_user_id = &s
}

// DummyUserID returns the value of the "dummy_user_id" field in the mutation.
func (m *WechatSessionMutation) DummyUserID() (r string, exists bool) {
	v := m.dummy_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldDummyUserID returns the old "dummy_user_id" field's value of the WechatSession entity.
// If the WechatSession object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WechatSessionMutation) OldDummyUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDummyUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDummyUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDummyUserID: %w", err)
	}
	return oldValue.DummyUserID, nil
}

// ResetDummyUserID resets all changes to the "dummy_user_id" field.
func (m *WechatSessionMutation) ResetDummyUserID() {
	m.dummy_user_id = nil
}

// Where appends a list predicates to the WechatSessionMutation builder.
func (m *WechatSessionMutation) Where(ps ...predicate.WechatSession) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *WechatSessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (WechatSession).
func (m *WechatSessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WechatSessionMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.created_at != nil {
		fields = append(fields, wechatsession.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, wechatsession.FieldUpdatedAt)
	}
	if m.deleted != nil {
		fields = append(fields, wechatsession.FieldDeleted)
	}
	if m.session != nil {
		fields = append(fields, wechatsession.FieldSession)
	}
	if m.dummy_user_id != nil {
		fields = append(fields, wechatsession.FieldDummyUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WechatSessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case wechatsession.FieldCreatedAt:
		return m.CreatedAt()
	case wechatsession.FieldUpdatedAt:
		return m.UpdatedAt()
	case wechatsession.FieldDeleted:
		return m.Deleted()
	case wechatsession.FieldSession:
		return m.Session()
	case wechatsession.FieldDummyUserID:
		return m.DummyUserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WechatSessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case wechatsession.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case wechatsession.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case wechatsession.FieldDeleted:
		return m.OldDeleted(ctx)
	case wechatsession.FieldSession:
		return m.OldSession(ctx)
	case wechatsession.FieldDummyUserID:
		return m.OldDummyUserID(ctx)
	}
	return nil, fmt.Errorf("unknown WechatSession field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatSessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case wechatsession.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case wechatsession.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case wechatsession.FieldDeleted:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeleted(v)
		return nil
	case wechatsession.FieldSession:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSession(v)
		return nil
	case wechatsession.FieldDummyUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDummyUserID(v)
		return nil
	}
	return fmt.Errorf("unknown WechatSession field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WechatSessionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WechatSessionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WechatSessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown WechatSession numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WechatSessionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WechatSessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WechatSessionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown WechatSession nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WechatSessionMutation) ResetField(name string) error {
	switch name {
	case wechatsession.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case wechatsession.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case wechatsession.FieldDeleted:
		m.ResetDeleted()
		return nil
	case wechatsession.FieldSession:
		m.ResetSession()
		return nil
	case wechatsession.FieldDummyUserID:
		m.ResetDummyUserID()
		return nil
	}
	return fmt.Errorf("unknown WechatSession field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WechatSessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WechatSessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WechatSessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WechatSessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WechatSessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WechatSessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WechatSessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown WechatSession unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WechatSessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown WechatSession edge %s", name)
}
