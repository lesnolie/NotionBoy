// Code generated by ent, DO NOT EDIT.

package quota

import (
	"notionboy/db/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// Deleted applies equality check predicate on the "deleted" field. It's identical to DeletedEQ.
func Deleted(v bool) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// UserID applies equality check predicate on the "user_id" field. It's identical to UserIDEQ.
func UserID(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// Daily applies equality check predicate on the "daily" field. It's identical to DailyEQ.
func Daily(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaily), v))
	})
}

// Monthly applies equality check predicate on the "monthly" field. It's identical to MonthlyEQ.
func Monthly(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthly), v))
	})
}

// Yearly applies equality check predicate on the "yearly" field. It's identical to YearlyEQ.
func Yearly(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearly), v))
	})
}

// DailyUsed applies equality check predicate on the "daily_used" field. It's identical to DailyUsedEQ.
func DailyUsed(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyUsed), v))
	})
}

// MonthlyUsed applies equality check predicate on the "monthly_used" field. It's identical to MonthlyUsedEQ.
func MonthlyUsed(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthlyUsed), v))
	})
}

// YearlyUsed applies equality check predicate on the "yearly_used" field. It's identical to YearlyUsedEQ.
func YearlyUsed(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearlyUsed), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// DeletedEQ applies the EQ predicate on the "deleted" field.
func DeletedEQ(v bool) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleted), v))
	})
}

// DeletedNEQ applies the NEQ predicate on the "deleted" field.
func DeletedNEQ(v bool) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleted), v))
	})
}

// UserIDEQ applies the EQ predicate on the "user_id" field.
func UserIDEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "user_id" field.
func UserIDNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "user_id" field.
func UserIDIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "user_id" field.
func UserIDNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "user_id" field.
func UserIDGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "user_id" field.
func UserIDGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "user_id" field.
func UserIDLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "user_id" field.
func UserIDLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// CategoryEQ applies the EQ predicate on the "category" field.
func CategoryEQ(v Category) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCategory), v))
	})
}

// CategoryNEQ applies the NEQ predicate on the "category" field.
func CategoryNEQ(v Category) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCategory), v))
	})
}

// CategoryIn applies the In predicate on the "category" field.
func CategoryIn(vs ...Category) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCategory), v...))
	})
}

// CategoryNotIn applies the NotIn predicate on the "category" field.
func CategoryNotIn(vs ...Category) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCategory), v...))
	})
}

// DailyEQ applies the EQ predicate on the "daily" field.
func DailyEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDaily), v))
	})
}

// DailyNEQ applies the NEQ predicate on the "daily" field.
func DailyNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDaily), v))
	})
}

// DailyIn applies the In predicate on the "daily" field.
func DailyIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDaily), v...))
	})
}

// DailyNotIn applies the NotIn predicate on the "daily" field.
func DailyNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDaily), v...))
	})
}

// DailyGT applies the GT predicate on the "daily" field.
func DailyGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDaily), v))
	})
}

// DailyGTE applies the GTE predicate on the "daily" field.
func DailyGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDaily), v))
	})
}

// DailyLT applies the LT predicate on the "daily" field.
func DailyLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDaily), v))
	})
}

// DailyLTE applies the LTE predicate on the "daily" field.
func DailyLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDaily), v))
	})
}

// DailyIsNil applies the IsNil predicate on the "daily" field.
func DailyIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDaily)))
	})
}

// DailyNotNil applies the NotNil predicate on the "daily" field.
func DailyNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDaily)))
	})
}

// MonthlyEQ applies the EQ predicate on the "monthly" field.
func MonthlyEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthly), v))
	})
}

// MonthlyNEQ applies the NEQ predicate on the "monthly" field.
func MonthlyNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonthly), v))
	})
}

// MonthlyIn applies the In predicate on the "monthly" field.
func MonthlyIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMonthly), v...))
	})
}

// MonthlyNotIn applies the NotIn predicate on the "monthly" field.
func MonthlyNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMonthly), v...))
	})
}

// MonthlyGT applies the GT predicate on the "monthly" field.
func MonthlyGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonthly), v))
	})
}

// MonthlyGTE applies the GTE predicate on the "monthly" field.
func MonthlyGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonthly), v))
	})
}

// MonthlyLT applies the LT predicate on the "monthly" field.
func MonthlyLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonthly), v))
	})
}

// MonthlyLTE applies the LTE predicate on the "monthly" field.
func MonthlyLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonthly), v))
	})
}

// MonthlyIsNil applies the IsNil predicate on the "monthly" field.
func MonthlyIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonthly)))
	})
}

// MonthlyNotNil applies the NotNil predicate on the "monthly" field.
func MonthlyNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonthly)))
	})
}

// YearlyEQ applies the EQ predicate on the "yearly" field.
func YearlyEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearly), v))
	})
}

// YearlyNEQ applies the NEQ predicate on the "yearly" field.
func YearlyNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYearly), v))
	})
}

// YearlyIn applies the In predicate on the "yearly" field.
func YearlyIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYearly), v...))
	})
}

// YearlyNotIn applies the NotIn predicate on the "yearly" field.
func YearlyNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYearly), v...))
	})
}

// YearlyGT applies the GT predicate on the "yearly" field.
func YearlyGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYearly), v))
	})
}

// YearlyGTE applies the GTE predicate on the "yearly" field.
func YearlyGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYearly), v))
	})
}

// YearlyLT applies the LT predicate on the "yearly" field.
func YearlyLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYearly), v))
	})
}

// YearlyLTE applies the LTE predicate on the "yearly" field.
func YearlyLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYearly), v))
	})
}

// YearlyIsNil applies the IsNil predicate on the "yearly" field.
func YearlyIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYearly)))
	})
}

// YearlyNotNil applies the NotNil predicate on the "yearly" field.
func YearlyNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYearly)))
	})
}

// DailyUsedEQ applies the EQ predicate on the "daily_used" field.
func DailyUsedEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedNEQ applies the NEQ predicate on the "daily_used" field.
func DailyUsedNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedIn applies the In predicate on the "daily_used" field.
func DailyUsedIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDailyUsed), v...))
	})
}

// DailyUsedNotIn applies the NotIn predicate on the "daily_used" field.
func DailyUsedNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDailyUsed), v...))
	})
}

// DailyUsedGT applies the GT predicate on the "daily_used" field.
func DailyUsedGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedGTE applies the GTE predicate on the "daily_used" field.
func DailyUsedGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedLT applies the LT predicate on the "daily_used" field.
func DailyUsedLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedLTE applies the LTE predicate on the "daily_used" field.
func DailyUsedLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDailyUsed), v))
	})
}

// DailyUsedIsNil applies the IsNil predicate on the "daily_used" field.
func DailyUsedIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDailyUsed)))
	})
}

// DailyUsedNotNil applies the NotNil predicate on the "daily_used" field.
func DailyUsedNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDailyUsed)))
	})
}

// MonthlyUsedEQ applies the EQ predicate on the "monthly_used" field.
func MonthlyUsedEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedNEQ applies the NEQ predicate on the "monthly_used" field.
func MonthlyUsedNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedIn applies the In predicate on the "monthly_used" field.
func MonthlyUsedIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldMonthlyUsed), v...))
	})
}

// MonthlyUsedNotIn applies the NotIn predicate on the "monthly_used" field.
func MonthlyUsedNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldMonthlyUsed), v...))
	})
}

// MonthlyUsedGT applies the GT predicate on the "monthly_used" field.
func MonthlyUsedGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedGTE applies the GTE predicate on the "monthly_used" field.
func MonthlyUsedGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedLT applies the LT predicate on the "monthly_used" field.
func MonthlyUsedLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedLTE applies the LTE predicate on the "monthly_used" field.
func MonthlyUsedLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMonthlyUsed), v))
	})
}

// MonthlyUsedIsNil applies the IsNil predicate on the "monthly_used" field.
func MonthlyUsedIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMonthlyUsed)))
	})
}

// MonthlyUsedNotNil applies the NotNil predicate on the "monthly_used" field.
func MonthlyUsedNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMonthlyUsed)))
	})
}

// YearlyUsedEQ applies the EQ predicate on the "yearly_used" field.
func YearlyUsedEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedNEQ applies the NEQ predicate on the "yearly_used" field.
func YearlyUsedNEQ(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedIn applies the In predicate on the "yearly_used" field.
func YearlyUsedIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYearlyUsed), v...))
	})
}

// YearlyUsedNotIn applies the NotIn predicate on the "yearly_used" field.
func YearlyUsedNotIn(vs ...int) predicate.Quota {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYearlyUsed), v...))
	})
}

// YearlyUsedGT applies the GT predicate on the "yearly_used" field.
func YearlyUsedGT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedGTE applies the GTE predicate on the "yearly_used" field.
func YearlyUsedGTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedLT applies the LT predicate on the "yearly_used" field.
func YearlyUsedLT(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedLTE applies the LTE predicate on the "yearly_used" field.
func YearlyUsedLTE(v int) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYearlyUsed), v))
	})
}

// YearlyUsedIsNil applies the IsNil predicate on the "yearly_used" field.
func YearlyUsedIsNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYearlyUsed)))
	})
}

// YearlyUsedNotNil applies the NotNil predicate on the "yearly_used" field.
func YearlyUsedNotNil() predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYearlyUsed)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Quota) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Quota) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Quota) predicate.Quota {
	return predicate.Quota(func(s *sql.Selector) {
		p(s.Not())
	})
}
